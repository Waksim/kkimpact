# 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import sqlite3
from datetime import datetime

# 2. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from aiogram import Bot, Dispatcher, types, Router, F, html
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __
from aiogram.utils.media_group import MediaGroupBuilder
from loguru import logger

# 3. –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from filters.chat_type import ChatTypeFilter
from functions import random_hoyolab, generate_deck
from functions.create_image import create_decks_img
from keyboards.ru import kb_ru_main
from config import settings

bot = Bot(token=settings.bot_token)

ru = Router()

ru.message.filter(
    ChatTypeFilter(chat_type=["private"])
)


# ____________________________________________________________________
@ru.message(F.text.lower() == "üá∑üá∫ —Ä—É—Å—Å–∫–∏–π")
async def cmd_start(message: types.Message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    logger.info(f"@{message.from_user.username} ‚Äì '{message.text}'")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('./users_info.sqlite') as sqlite_connection:
        cursor = sqlite_connection.cursor()
        cursor.execute(
            "UPDATE telegram_users SET preferens = 'ru' WHERE tg_id = ?;",
            (message.from_user.id,)
        )
        sqlite_connection.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    sticker_id = 'CAACAgIAAxkBAAELtbNl9Hx92wKQloh3xmrWEiu5Pui-nwACTU4AAmhnoEue0q81egR3KTQE'
    welcome_message = _(
        "–ü—Ä–∏–≤–µ—Ç, –ö–∞—Ä—Ç–æ–±–æ—Ç–∏–∫!\n"
        "1) –Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –¥–µ–∫–∏, –ª–∏–±–æ –±—Ä–∞—Ç—å –∏—Ö —Å Hoyolab.\n"
        "–ö–æ–¥—ã –∫–æ–ª–æ–¥ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã, –Ω–∞–∂–º–∏ –Ω–∞ –Ω–∏—Ö, —á—Ç–æ–±—ã " + html.code("–°–ö–û–ü–ò–†–û–í–ê–¢–¨") + " (‚Üê–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ).\n"
        "2) –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –¥–æ 10 –∫–æ–¥–æ–≤-–∫–æ–ª–æ–¥ –∑–∞ —Ä–∞–∑, —è –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ñ–æ—Ç–æ –∏ —Å–æ—Å—Ç–∞–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å /start –∏–ª–∏ /choose_lang, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫\n"
    )

    await message.answer_sticker(sticker_id)
    await message.answer(
        welcome_message,
        reply_markup=kb_ru_main,
        parse_mode=ParseMode.HTML
    )


@ru.message(F.text == "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def donations(message: types.Message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    logger.info(f"@{message.from_user.username} ‚Äì '{message.text}'")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    welcome_message = _(
        html.bold("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞:\n\n")
        + "https://www.donationalerts.com/c/kkimpact\n\n"
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n"
        "..."
    )
    keyboard = [
        [InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="b_go_to_main_menu")]
    ]

    await message.answer_photo(
        photo='AgACAgIAAxkBAAIfIWbOKjuwRezCqkLQ1VmUR89G5RqrAAL55DEbNCpwSp8bguA75E90AQADAgADcwADNQQ',
        caption=welcome_message,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
    )

# ____________________________________________________________________
@ru.message(F.text.lower() == "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∫—É", flags={"long_operation": "typing"})  # üá∑üá∫
async def cmd_start(message: types.Message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    logger.info(f"@{message.from_user.username} ‚Äì '{message.text}'")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–∞—Ä—Ç
    generated_deck = generate_deck.get_random_code(card_name_lang='card_name_ru')
    deck_code, deck_role_cards = generated_deck

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    answer_text = (
        f"{html.bold(html.quote(deck_role_cards))}\n"
        f"{html.code(html.quote(deck_code))}"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–∫
    photo = create_decks_img(deck_code=deck_code)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=answer_text,
        parse_mode=ParseMode.HTML,
        reply_markup=kb_ru_main
    )


# ____________________________________________________________________
@ru.message(F.text.lower() == "–¥–µ–∫–∞ —Å hoyolab", flags={"long_operation": "typing"})  # üá∑üá∫
async def cmd_start(message: types.Message):
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    logger.info(f"@{message.from_user.username} ‚Äì '{message.text}'")

    deck_data = random_hoyolab.get_random_code_from_hoyolab(table_lang='hoyolab_decks_ru')

    author_nickname = deck_data[0]
    role_card_names = deck_data[1]
    deck_code = deck_data[2]
    deck_title = deck_data[3]
    author_uid = deck_data[4]
    description = deck_data[5]
    creation_time = datetime.utcfromtimestamp(int(deck_data[6])).strftime('%Y-%m-%d')
    server = deck_data[7]
    role_cards_codes = deck_data[8]
    action_cards_codes = deck_data[9]

    answer_text = _(
        html.bold(html.quote(_("üÉè –ö–∞—Ä—Ç—ã:  "))) + f"{role_card_names}\n\n" +
        html.bold(html.quote(_("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:  "))) + f"{deck_title}\n\n" +
        html.bold(html.quote(
            _("üë§ –ê–≤—Ç–æ—Ä:  "))) + f"{author_nickname}, uid - {html.code(html.quote(author_uid))} ({server}) \n\n" +
        html.bold(html.quote(_("üïó –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:  "))) + f"{creation_time}\n\n" +
        html.bold(html.quote(_("üìù –û–ø–∏—Å–∞–Ω–∏–µ:  "))) + f"{description}\n\n" +
        html.bold(html.quote(_("#Ô∏è‚É£ –ö–æ–¥:  "))) + html.code(html.quote(deck_code))
    )

    photo = create_decks_img(role_cards=role_cards_codes, action_cards=action_cards_codes)

    caption_len = len(answer_text)
    # print(caption_len)
    # 1024 –ø—Ä–µ–¥–µ–ª
    if caption_len < 1000:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=answer_text,
            parse_mode=ParseMode.HTML,
            reply_markup=kb_ru_main
        )
    else:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            parse_mode=ParseMode.HTML
        )
        await message.answer(
            answer_text,
            parse_mode=ParseMode.HTML,
            reply_markup=kb_ru_main
        )


@ru.message(F.text.regexp(r"^–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (\d+)$").as_("digits"), flags={"long_operation": "typing"})  # üá∑üá∫
async def cmd_start(message: types.Message, digits: list[str]):
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    logger.info(f"@{message.from_user.username} ‚Äì '{message.text}'")

    album_builder = MediaGroupBuilder()
    caption_text = ''
    num_decks = int(digits[1]) + 1

    for i in range(1, num_decks):
        generated_deck = generate_deck.get_random_code(card_name_lang='card_name_ru')
        deck_code = generated_deck[0]
        deck_role_cards = generated_deck[1]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        caption_text += (
            f"{i}) {html.bold(html.quote(deck_role_cards))}\n"
            f"{html.code(html.quote(deck_code))}\n"
        )

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ –¥–µ–∫
        photo = create_decks_img(deck_code=deck_code)
        album_builder.add_photo(media=photo, parse_mode=ParseMode.HTML)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if len(caption_text) < 1000:
        album_builder.caption = caption_text
        await message.answer_media_group(media=album_builder.build(), reply_markup=kb_ru_main)
    else:
        await message.answer_media_group(media=album_builder.build())
        await message.answer(caption_text, parse_mode=ParseMode.HTML, reply_markup=kb_ru_main)


@ru.message(F.text.regexp(r"^(\d+) —Å Hoyolab$").as_("digits"), flags={"long_operation": "typing"})  # üá∑üá∫
async def cmd_start(message: types.Message, digits: list[str]):
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    logger.info(f"@{message.from_user.username} ‚Äì '{message.text}'")

    album_builder = MediaGroupBuilder()
    caption_text = ''
    num_decks = int(digits[1]) + 1

    for i in range(1, num_decks):
        deck_data = random_hoyolab.get_random_code_from_hoyolab(table_lang='hoyolab_decks_ru')
        role_card_names = deck_data[1]
        deck_code = deck_data[2]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        caption_text += (
            f"{i}) {html.bold(html.quote(role_card_names))}\n"
            f"{html.code(html.quote(deck_code))}\n"
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –¥–µ–∫
        photo = create_decks_img(deck_code=deck_code)
        album_builder.add_photo(media=photo, parse_mode=ParseMode.HTML)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏
    if len(caption_text) < 1000:
        album_builder.caption = caption_text
        await message.answer_media_group(
            media=album_builder.build(),
            reply_markup=kb_ru_main
        )
    else:
        await message.answer_media_group(media=album_builder.build())
        await message.answer(
            caption_text,
            parse_mode=ParseMode.HTML,
            reply_markup=kb_ru_main
        )
